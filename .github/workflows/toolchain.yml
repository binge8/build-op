name: Toolchain

on:
  repository_dispatch:
    types: Toolchain
  workflow_dispatch:
  #schedule:
    #- cron: 00 16 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        PLATFORM: [x64, armv8]
    steps:
      - name: 签出
        uses: actions/checkout@main
      - name: 编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -yqq purge $(curl -fsSL https://raw.githubusercontent.com/binge8/ybin/master/bin/del) || true
          sudo -E apt-get -qq update
          sudo -E apt-get -yqq install $(curl -fsSL https://raw.githubusercontent.com/binge8/ybin/master/bin/get-apt)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          echo "DATE=$(date "+%d%H")" >> $GITHUB_ENV
      - name: 拉取源码
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          git clone https://github.com/binge8/ybin.git
          #获取Hash
          cd openwrt && echo "commitHash=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: 更新Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: 下载Packages
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        run: |
          mv ybin/bin/j${{ env.PLATFORM }}.config openwrt/.config
          cd openwrt
          sed -i '1,3!d' .config
          make defconfig
          make download -j16
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
      - name: 编译
        run: |
          cd openwrt
          echo -e "$nproc thread compile"
          make tools/install -j$[`nproc`+1] || make tools/install -j1 V=s
          make toolchain/install -j$[`nproc`+1] || make toolchain/install -j1 V=s
          #make target/install -j$[`nproc`+1] || make target/install -j1 V=s
          make diffconfig
          make package/clean
          echo "build=success" >> $GITHUB_ENV
      - name: 缓存
        if: always()
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        uses: actions/cache/save@v3
        with:
          path: |
            openwrt/build_dir/host*
            openwrt/build_dir/tool*
            openwrt/staging_dir/host*
            openwrt/staging_dir/tool*
          key: ${{ env.PLATFORM }}-${{ env.commitHash }}-${{ env.DATE }}
      - name: 触发编译
        if: env.build == 'success'
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        uses: peter-evans/repository-dispatch@main
        with:
          token: ${{ secrets.RELEASES_TOKEN }}
          event-type: j${{ env.PLATFORM }}
      - name: 触发编译
        if: env.build == 'success'
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        uses: peter-evans/repository-dispatch@main
        with:
          token: ${{ secrets.RELEASES_TOKEN }}
          event-type: l${{ env.PLATFORM }}
      - name: 微信推送
        if: always()
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        run: |
          if [ "${{ env.build }}" = "success" ];then
            curl -H "Content-Type:application/json" -X POST -d '{"token":"${{ secrets.pushbot }}","title":"${{ env.PLATFORM }}缓存成功","content":"${{ env.PLATFORM }}运行结束","template":"json"}' http://www.pushplus.plus/send
          else
            curl -H "Content-Type:application/json" -X POST -d '{"token":"${{ secrets.pushbot }}","title":"${{ env.PLATFORM }}缓存失败","content":"${{ env.PLATFORM }}运行结束","template":"json"}' http://www.pushplus.plus/send
          fi