name: Update Checker

env:
  # Lean源码
  REPO_URL_lede: https://github.com/coolsnowwolf/lede
  REPO_BRANCH_lede: master
  REPO_PATH_lede: "lede"
  # Package源码
  REPO_URL_packages: https://github.com/coolsnowwolf/packages
  REPO_BRANCH_packages: master
  REPO_PATH_packages: "packages"
  # luci源码
  REPO_URL_luci: https://github.com/coolsnowwolf/luci
  REPO_BRANCH_luci: master
  REPO_PATH_luci: "luci"
  # routing源码
  REPO_URL_routing: https://github.com/coolsnowwolf/routing
  REPO_BRANCH_routing: main
  REPO_PATH_routing: "routing"
  # SSRP源码
  REPO_URL_helloworld: https://github.com/fw876/helloworld
  REPO_BRANCH_helloworld: master
  REPO_PATH_helloworld: "helloworld"
  # dockerman源码
  REPO_URL_dockerman: https://github.com/lisaac/luci-app-dockerman
  REPO_BRANCH_dockerman: master
  REPO_PATH_dockerman: "dockerman"
  # pushbot源码
  REPO_URL_pushbot: https://github.com/931122/luci-app-pushbot
  REPO_BRANCH_pushbot: master
  REPO_PATH_pushbot: "pushbot"
  # oui源码
  REPO_URL_oui: https://github.com/zhaojh329/oui
  REPO_BRANCH_oui: master
  REPO_PATH_oui: "oui"

on:
  repository_dispatch:
    types: Update
  workflow_dispatch:
  #schedule:
  #  - cron: 58 15 * * *

jobs:
  check:
    runs-on: ubuntu-20.04
    steps:
      - name: 获取Hash
        id: getHash
        run: |
          # 获取lede_Hash
          git clone --depth 1 $REPO_URL_lede -b $REPO_BRANCH_lede $REPO_PATH_lede
          cd $REPO_PATH_lede
          echo "commitHash_lede=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          cd
          # 获取packages_Hash
          git clone --depth 1 $REPO_URL_packages -b $REPO_BRANCH_packages $REPO_PATH_packages
          cd $REPO_PATH_packages
          echo "commitHash_packages=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          cd
          # 获取luci_Hash
          git clone --depth 1 $REPO_URL_luci -b $REPO_BRANCH_luci $REPO_PATH_luci
          cd $REPO_PATH_luci
          echo "commitHash_luci=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          cd
          # 获取routing_Hash
          git clone --depth 1 $REPO_URL_routing -b $REPO_BRANCH_routing $REPO_PATH_routing
          cd $REPO_PATH_routing
          echo "commitHash_routing=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          cd
          # 获取helloworld_Hash
          git clone --depth 1 $REPO_URL_helloworld -b $REPO_BRANCH_helloworld $REPO_PATH_helloworld
          cd $REPO_PATH_helloworld
          echo "commitHash_helloworld=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          cd
          # 获取dockerman_Hash
          git clone --depth 1 $REPO_URL_dockerman -b $REPO_BRANCH_dockerman $REPO_PATH_dockerman
          cd $REPO_PATH_dockerman
          echo "commitHash_dockerman=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          cd
          # 获取pushbot_Hash
          git clone --depth 1 $REPO_URL_pushbot -b $REPO_BRANCH_pushbot $REPO_PATH_pushbot
          cd $REPO_PATH_pushbot
          echo "commitHash_pushbot=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          cd
          # 获取oui_Hash
          git clone --depth 1 $REPO_URL_oui -b $REPO_BRANCH_oui $REPO_PATH_oui
          cd $REPO_PATH_oui
          echo "commitHash_oui=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: 整理Hash
        id: combHeader
        run: |
          echo "commitHash_All=${{steps.getHash.outputs.commitHash_lede}}_${{steps.getHash.outputs.commitHash_packages}}_${{steps.getHash.outputs.commitHash_luci}}_${{steps.getHash.outputs.commitHash_routing}}_${{steps.getHash.outputs.commitHash_helloworld}}_${{steps.getHash.outputs.commitHash_dockerman}}_${{steps.getHash.outputs.commitHash_pushbot}}_${{steps.getHash.outputs.commitHash_oui}}" >> $GITHUB_OUTPUT
      - name: 比较Hash
        id: cacheHash
        uses: actions/cache@main
        with:
          path: .commitHash
          key: HEAD-${{ steps.combHeader.outputs.commitHash_All }}
      - name: 保存Hash
        if: steps.cacheHash.outputs.cache-hit != 'true'
        run: |
          echo ${{ steps.combHeader.outputs.commitHash_All }} | tee .commitHash
          echo "save=success" >> $GITHUB_ENV
      - name: 触发jx64
        if: steps.cacheHash.outputs.cache-hit != 'true'
        uses: peter-evans/repository-dispatch@main
        with:
          token: ${{ secrets.RELEASES_TOKEN }}
          event-type: jx64
      - name: 触发lx64
        if: steps.cacheHash.outputs.cache-hit != 'true'
        uses: peter-evans/repository-dispatch@main
        with:
          token: ${{ secrets.RELEASES_TOKEN }}
          event-type: lx64
      - name: 触发jarmv8
        if: steps.cacheHash.outputs.cache-hit != 'true'
        uses: peter-evans/repository-dispatch@main
        with:
          token: ${{ secrets.RELEASES_TOKEN }}
          event-type: jarmv8
      - name: 触发larmv8
        if: steps.cacheHash.outputs.cache-hit != 'true'
        uses: peter-evans/repository-dispatch@main
        with:
          token: ${{ secrets.RELEASES_TOKEN }}
          event-type: larmv8
      - name: 微信推送
        if: always()
        run: |
          if [ "${{ env.save }}" = "success" ];then
            curl -H "Content-Type:application/json" -X POST -d '{"token":"${{ secrets.pushbot }}","title":"源码有更新","content":"源码有更新","template":"json"}' http://www.pushplus.plus/send
          else
            curl -H "Content-Type:application/json" -X POST -d '{"token":"${{ secrets.pushbot }}","title":"源码无更新","content":"源码无更新","template":"json"}' http://www.pushplus.plus/send
          fi
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 3
          keep_minimum_runs: 0
